---
layout:       post
title:        "引用类型"
subtitle:     "《JavaScript高级程序设计》"
date:         2018-05-06 13:00:00
author:       "Raquel"
header-img:   "img/post-bg-2015.jpg"
header-mask:  0.3
catalog:      true
tags:
    - 读书笔记
---

### Object
### Array
#### 栈方法
栈是一种后进先出的数据结构，ECMAscript 为数组专门提供了 push() 和 pop() 方法。
push 添加到数组末尾，pop 从数组末尾移除最后一项
#### 队列方法
队列，先进先出。
shift() 方法取出数组第一项。
unshift() 方法添加在数组前端，任意项，并返回数组长度。
#### 重排序
reverse() 反转
sort() 升序排列，比较的是字符串，但是可以穿入自己定义的 function，例如 myValue.sort(compare)。
```
function compare(value1, value2) {
  return value2 - value1;
}
```
#### 操作方法
concat()，当没有参数，只是复制当前数组并返回副本，如果有一或者多个数组，该方法会将这些数组中的每一项添加到结果数组中。
slice()，接受一或二个参数，即要返回项的起始位和结束位，但不包括结束位置的项。
splice()，删除，传入两个参数：要删除的第一项的位置和删除的项数；插入，3个参数：起始位置，0（要删除的项数），要插入的项；替换，同插入。
#### 位置方法
indexOf(), lastIndexOf()
#### 迭代方法
every():每一项都 true，最后结果才是 true
some() map() forEach() filter()
#### 归并方法
reduce()，第一项开始
reduceRight()，最后一项开始
可以求和：
```
var values = [1,2,3,4,5];
var sum = values.reduce(function(prev, cur, index, array) {
  return prev + cur;
});
alert(sum); // 15
```

### Date
### RegExp
```
var expression = / pattern / flags ;
```
flags：g(全局), i(不区分大小写), m(多行)
```
var pattern1 = /at/g; // 匹配所有 at
var pattern2 = /[bc]at/i; // 匹配第一个 bat 或 cat ，不区分大小写
```
### Function
函数名实际上是一个指向函数对象的指针。
```
function sum(num1, num2) {
  return num1 + num2;
}
var anotherSum = sum; // 不带圆括号的函数名是访问函数值折而非调用函数，此时 anotherSum 和 sum 就都指向了同一个函数，可以使用 anotherSum()
```
**没有重载**
#### 函数声明和函数表达式
解析器率先读取函数声明，并使其在执行任何代码前可用，函数表达式必须等到解析器执行到它所在代码行。
#### 作为值得函数
函数可以作为值来使用，可以像传递参数一样把一个函数传递给另一个函数，可以从一个函数中返回另一个函数
```
function callSomeFunction(someFunction, someArgument) {
  return someFunction(someArgument);
}
function createCompareFunction(propertyName) {
  return function(object1, object2) {
    var value1 = object1[propertyName];
    var value2 = object2[propertyName];
    if (value1 < value2) {
      return -1;
    } else if (value1 > value2) {
      return 1;
    } else {
      return 0;
    }
  };
}
var data = [{name: "Za", age: 28}, {name: "Ni", age: 29}];
data.sort(createCompareFunction("name"));
data.sort(createCompareFunction("age"));
```
#### 函数内部属性
**arguments**：arguments 的主要用途是保存函数参数，但这个对象还有一个名字叫做 cellee 的属性，是一个指针，指向这个 arguments 的对象的函数，阶乘函数运用：
```
function factorial(num) {
  if (num <= 1) {
    return 1;
  } else {
    return num * arguments.callee(num - 1);
  }
}
var trueFactorial = factorial;
factorial = function() {
  return 0;
}
alert(trueFactorial(5)); // 120 如果没有使用 arguments.callee，就会是0
```
**this**：引用的是函数执行的环境对象，具体情况可见另一篇关于 this 的 post。
#### 函数的属性和方法
每个函数都包含两个属性： length 和 prototype。
length 表示函数希望接受的命名参数的个数。
valueOf() 等方法实际上都保存在 prototype 名下，只不过要通过各自的实例对象访问，ECMAscript 5 中，prototype 属性是不可枚举的。
每个函数都包含两个非继承而来的方法，apply() 和 call()，都是在特定的作用域中调用函数，实际上等于设置函数体内 this 对象的值。
bind() 该方法会创建一个函数实例，其 this 的值会被绑定到传递给 bind() 函数的值。
```
window.color = "red";
var o = { color: "blue" };
function sayColor() {
  alert(this.color);
}
var objectSayColor = sayColor.bind(o);
objectSayColor(); // blue
```
### 基本包装类型
……
