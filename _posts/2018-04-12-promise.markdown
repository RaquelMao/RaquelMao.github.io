---
layout:       post
title:        "空函数"
subtitle:     "promise"
date:         2018-04-12 16:00:00
author:       "Raquel"
header-img:   "img/post-bg-2015.jpg"
header-mask:  0.3
catalog:      true
tags:
    - promise
---

```
ReadProject({ commit }) {
  return new Promise((resolve, reject) => {
    fs.readFile(projectFile, 'utf-8').then((data) => {
      let err;
      try {
        const project = JSON.parse(data);
        commit(UPDATE_PROJECT, project);
        resolve(project);
      } catch (e) {
        err = errorCode.dataFileNotAvailable;
        reject(new TheiaError(err));
      }
    }).catch((err) => {
      err = errorCode.dataFileNotAvailable;
      reject(new TheiaError(err));
    });
  });
},
```
因为逻辑问题我不想做错误处理，也不想 console.log(error)，所以调用时写了 .catch(); 结果报错。
```
const promises = [
  this.$store.dispatch('ReadProject'),
  this.$store.dispatch('ReadSettings'),
];
Promise.all(promises).then(() => {
  this.$router.push({ path: '/' });
})
.catch(() => {}); // 不能写成 .catch();
```
resolve 和 reject 是两个回调函数，不能写成 .catch() 如果这种形式，相当于传入 reject() 是 null，写成 .catch(() => {}) 正确形式，才是返回一个空函数




promise 和 callback
```
const fs = require('fs');

function readFile(path, callback) {
  fs.readFile(path, function (err, text) {
    callback(err, text);
  });
}
// promise 形式
function readFilePromise(path) {
  return new Promise((resolve, reject) => {
    fs.readFile(path, (err, text) => {
      if (err) {
        reject(err);
      } else {
        resolve(text);
      }
    });
  });
}
```

promise then catch 应用
```
readFile('path1',function (err, text) {
  if (err) {
    console.log(err);
    return;
  }
  console.log(text);
  readFile('path2', function (err, text) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(text);
  });
});

readFilePromise('path1').then((text1) => {
  console.log(text1);
  return readFilePromise('path2');
}).then((text2) => {
  console.log(text2);
}).catch((err) => {
  console.log(err);
});
```
```
handleDeleteUser(user) {
  this.$confirm(this.$t('confirm-delete'), this.$t('reminder'), {
    confirmButtonText: this.$t('confirm'),
    cancelButtonText: this.$t('cancel'),
    type: 'warning',
  }).then(() => {
    removeUser(user.userId).then(() => {
      this.refresh();
    }).catch((err) => {
      this.$message.error(this.$t(kebabCase(err.message)));
    });
  }).catch(() => {});
},
handleDeleteUser(user) {
  this.$confirm(this.$t('confirm-delete'), this.$t('reminder'), {
    confirmButtonText: this.$t('confirm'),
    cancelButtonText: this.$t('cancel'),
    type: 'warning',
  })
    .then(() => removeUser(user.userId))
    .then(() => {
      this.refresh();
    })
    .catch((err) => {
      this.$message.error(this.$t(kebabCase(err.message)));
    });
},
```
```
// 当前一个then return promise的时候 后面一个then才会在前一个结束后做
export function packageProject(project, distZipPath) {
  return new Promise((resolve, reject) => {
    const { directory, macros } = project;
    let includes = [];
    const name = path.basename(distZipPath, path.extname(distZipPath));
    const configPath = path.join(path.dirname(distZipPath), `${name}.json`);
    const projectName = path.basename(directory);
    const cacheProjectPath = path.join(cacheDirectory, projectName);
    const dotIncludePath = path.join(cacheProjectPath, '_include');
    fs.pathExists(cacheProjectPath)
      .then((exists) => {
        if (exists) {
          return fs.remove(cacheProjectPath);
        }
        return Promise.resolve();
      })
      .then(() => fs.copy(directory, cacheProjectPath))
      .then(() => fs.ensureDir(dotIncludePath))
      .then(() => {
        includes = project.includes.map((include) => {
          if (path.isAbsolute(include)) {
            return path.relative(directory, include);
          }
          return include;
        });
        const promises = [];
        includes.forEach((include) => {
          if (!include.startsWith('..')) {
            return;
          }
          const includePath = path.join(dotIncludePath, getEscapePath(include));
          promises.push(new Promise((resolve, reject) => { // eslint-disable-line no-unused-vars
            fs.copy(path.join(directory, include), includePath).then(resolve).catch(resolve);
          }));
        });
        includes = includes.map((include) => {
          include = include.split(path.sep).join('/');
          if (include.startsWith('..')) {
            return path.join('_include', getEscapePath(include));
          }
          return include;
        });
        return Promise.all(promises);
      })
      .then(() => {
        const config = {
          headers: includes,
          system_stub: false,
          macros,
          direct_mem_access: false,
          time_out: 15,
        };
        const promises = [
          fs.writeJson(path.join(cacheProjectPath, 'config.json'), config),
          fs.writeJson(configPath, config),
        ];
        return Promise.all(promises);
      })
      .then(() => {
        const walker = walk.walk(cacheProjectPath, { followLinks: false });
        const promise = new Promise((resolve, reject) => {
          walker.on('file', (root, filesStats, next) => {
            if (path.extname(filesStats.name) !== '.c' && path.extname(filesStats.name) !== '.h') {
              fs.remove(path.join(root, filesStats.name), () => {
                next();
              });
            } else {
              next();
            }
          }).on('end', () => {
            resolve();
          }).on('errors', (root, nodeStatsArray) => {
            reject(nodeStatsArray);
          });
        });
        return promise;
      })
      .then(() => {
        zipFolder(cacheProjectPath, distZipPath, (err) => {
          if (err) {
            reject(err);
            return;
          }
          fs.remove(cacheProjectPath).then(resolve).catch(reject);
        });
      })
      .catch(reject);
  });
}
```
